// Copyright (c) 2020 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

package zedrouter

import (
	"bytes"
	"net"
	"regexp"
	"testing"

	"github.com/lf-edge/eve/pkg/pillar/base"
	"github.com/lf-edge/eve/pkg/pillar/types"
	"github.com/sirupsen/logrus"
)

func init() {
	logger = logrus.StandardLogger()
	log = base.NewSourceLogObject(logger, "zedrouter", 1234)
}

type dnsmasqConfigletParams struct {
	ctx          *zedrouterContext
	bridgeName   string
	bridgeIPAddr string
	netstatus    *types.NetworkInstanceStatus
	hostsDir     string
	ipsetHosts   []string
	uplink       string
	dnsServers   []net.IP
	ntpServers   []net.IP
}

func exampleDnsmasqConfigletParams() dnsmasqConfigletParams {
	var dcp dnsmasqConfigletParams

	dcp.bridgeName = "br0"
	dcp.bridgeIPAddr = "10.0.0.1"

	var netstatus types.NetworkInstanceStatus
	netstatus.DhcpRange.Start = net.IP{10, 0, 0, 2}
	netstatus.DhcpRange.End = net.IP{10, 0, 0, 123}
	dcp.netstatus = &netstatus

	dcp.hostsDir = "/etc/hosts.d"
	dcp.ipsetHosts = []string{"zededa.com", "example.com"}

	dcp.uplink = "up0"

	dcp.dnsServers = []net.IP{{1, 1, 1, 1}, {141, 1, 1, 1}, {208, 67, 220, 220}}
	dcp.ntpServers = []net.IP{{94, 130, 35, 4}, {94, 16, 114, 254}}

	return dcp
}

func runCreateDnsmasqConfiglet(dcp dnsmasqConfigletParams) string {
	var buf bytes.Buffer

	createDnsmasqConfigletNoFile(&buf, dcp.ctx, dcp.bridgeName, dcp.bridgeIPAddr, dcp.netstatus, dcp.hostsDir, dcp.ipsetHosts, dcp.uplink, dcp.dnsServers, dcp.ntpServers)

	return buf.String()
}

func TestCreateDnsmasqConfigletWithoutDhcpRangeEnd(t *testing.T) {
	t.Parallel()

	dcp := exampleDnsmasqConfigletParams()

	dcp.netstatus.DhcpRange.End = nil

	config := runCreateDnsmasqConfiglet(dcp)

	dhcpRangeRex := "(?m)^dhcp-range=10.0.0.2,static,255.255.255.0,60m$"
	ok, err := regexp.MatchString(dhcpRangeRex, config)
	if err != nil {
		panic(err)
	}
	if !ok {
		t.Fatalf("expected to match '%s', but got '%s'", dhcpRangeRex, config)
	}

}

func TestCreateDnsmasqConfigletWithDhcpRangeEnd(t *testing.T) {
	t.Parallel()

	dcp := exampleDnsmasqConfigletParams()
	config := runCreateDnsmasqConfiglet(dcp)

	configExpected := `
# Automatically generated by zedrouter
except-interface=lo
bind-interfaces
quiet-dhcp
quiet-dhcp6
no-hosts
no-ping
bogus-priv
neg-ttl=10
dhcp-ttl=600
dhcp-leasefile=/run/zedrouter/dnsmasq.leases//br0
server=1.1.1.1@up0
server=141.1.1.1@up0
server=208.67.220.220@up0
no-resolv
ipset=/zededa.com/ipv4.zededa.com,ipv6.zededa.com
ipset=/example.com/ipv4.example.com,ipv6.example.com
pid-file=/run/dnsmasq.br0.pid
interface=br0
listen-address=10.0.0.1
hostsdir=/etc/hosts.d
dhcp-hostsdir=/run/zedrouter/dhcp-hosts.br0
dhcp-option=option:ntp-server,94.130.35.4,94.16.114.254
dhcp-option=option:router
dhcp-option=option:dns-server
dhcp-range=10.0.0.2,10.0.0.123,255.255.255.0,60m
`
	if configExpected != config {
		t.Fatalf("expected '%s', but got '%s'", configExpected, config)
	}
}

func TestRunDnsmasqInvalidDhcpRange(t *testing.T) {
	t.Parallel()

	line, err := dhcpRangeConfigLine(nil, nil)
	if err != nil {
		panic(err)
	}

	if line != "" {
		t.Fatalf("dhcp-range is '%s', expected ''", line)
	}

	line, err = dhcpRangeConfigLine(net.IP{10, 0, 0, 5}, net.IP{10, 0, 0, 3})
	if err == nil {
		t.Fatalf("expected dhcp range to fail, but got %s", line)
	}
}
